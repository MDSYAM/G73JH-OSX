//From RehabMan Guide

DefinitionBlock("", "SSDT", 2, "hack", "BATT", 0)
{
    External(_SB.PCI0.LPCB, DeviceObj)
    External(_SB.PCI0.LPCB.EC, DeviceObj)
    External(_SB.PCI0.LPCB.EC.ECAV, MethodObj)
    External(BSLF, IntObj)
    External(_SB.PCI0.LPCB.EC.RDBL, IntObj)
    External(_SB.PCI0.LPCB.EC.RDWD, IntObj)
    External(_SB.PCI0.LPCB.EC.RDBT, IntObj)
    External(_SB.PCI0.LPCB.EC.RCBT, IntObj)
    External(_SB.PCI0.LPCB.EC.RDQK, IntObj)
    External(_SB.PCI0.LPCB.EC.MUEC, MutexObj)
    External(_SB.PCI0.LPCB.EC.SBBY, IntObj)
    External(_SB.PCI0.LPCB.EC.SWTC, MethodObj)
    External(_SB.PCI0.LPCB.EC.DAT0, FieldUnitObj)
    External(_SB.PCI0.LPCB.EC.WRBL, IntObj)
    External(_SB.PCI0.LPCB.EC.WRWD, IntObj)
    External(_SB.PCI0.LPCB.EC.WRBT, IntObj)
    External(_SB.PCI0.LPCB.EC.SDBT, IntObj)
    External(_SB.PCI0.LPCB.EC.WRQK, IntObj)
    External(_SB.PCI0.LPCB.EC.DAT1, FieldUnitObj)
    External(_SB.PCI0.LPCB.EC.DA20, FieldUnitObj)
    External(_SB.PCI0.LPCB.EC.DA21, FieldUnitObj)
    External(_SB.PCI0.LPCB.EC.RRAM, MethodObj)
    External(_SB.PCI0.LPCB.EC.DECF, IntObj)
    
    Device(_SB.PCI0.MCHC) { Name(_ADR, 0x00000000) }    
    
    // This is an override for battery methods that access EC fields
    // larger than 8-bit.
    Scope (_SB.PCI0.LPCB.EC)
    {
        OperationRegion (ECOR, EmbeddedControl, 0x00, 0xFF)        Field (ECOR, ByteAcc, Lock, Preserve)        {
                Offset (0x93),
                TH00,8,TH01,8,
                TH10,8,TH11,8,
                Offset (0xBE),
                /*B0TM*/,   16,
                /*B0C1*/,   16,
                /*B0C2*/,   16,
                XC30,8,XC31,8,
                Offset (0xDE),
                /*B1TM*/,   16,
                /*B1C1*/,   16,
                /*B1C2*/,   16,
                YC30,8,YC31,8,
                Offset (0xF4),
                B0S0,8,B0S1,8,
                Offset (0xFC),
                B1S0,8,B1S1,8
        }        OperationRegion (SMBX, EmbeddedControl, 0x18, 0x28)        Field (SMBX, ByteAcc, NoLock, Preserve)        {
            PRTC,   8,             SSTS,   5,                 ,   1,             ALFG,   1,             CDFG,   1,             ADDR,   8,             CMDB,   8,             BA00,8,BA01,8,BA02,8,BA03,8,            BA04,8,BA05,8,BA06,8,BA07,8,            BA08,8,BA09,8,BA0A,8,BA0B,8,            BA0C,8,BA0D,8,BA0E,8,BA0F,8,            BA10,8,BA11,8,BA12,8,BA13,8,            BA14,8,BA15,8,BA16,8,BA17,8,            BA18,8,BA19,8,BA1A,8,BA1B,8,            BA1C,8,BA1D,8,BA1E,8,BA1F,8            ,             BCNT,   8,                 ,   1,             ALAD,   7,             ALD0,   8,             ALD1,   8        }        OperationRegion (SMB2, EmbeddedControl, 0x40, 0x28)        Field (SMB2, ByteAcc, NoLock, Preserve)        {
            PRT2,   8,             SST2,   5,                 ,   1,             ALF2,   1,             CDF2,   1,             ADD2,   8,             CMD2,   8,             BB00,8,BB01,8,BB02,8,BB03,8,            BB04,8,BB05,8,BB06,8,BB07,8,            BB08,8,BB09,8,BB0A,8,BB0B,8,            BB0C,8,BB0D,8,BB0E,8,BB0F,8,            BB10,8,BB11,8,BB12,8,BB13,8,            BB14,8,BB15,8,BB16,8,BB17,8,            BB18,8,BB19,8,BB1A,8,BB1B,8,            BB1C,8,BB1D,8,BB1E,8,BB1F,8            ,             BCN2,   8,                 ,   1,             ALA2,   7,             ALR0,   8,             ALR1,   8        }
            
        Field (SMBX, ByteAcc, NoLock, Preserve)        {
            Offset (0x04),             T2B0,8,T2B1,8        }
    }                                
    //patched methods
    Scope (_SB.PCI0.LPCB.EC)
    {
        Method (BIFA, 0, NotSerialized)        {            If (ECAV ())            {                If (BSLF)                {                    Store (B1B2(B1S0,B1S1), Local0)                }                Else                {                    Store (B1B2(B0S0,B0S1), Local0)                }            }            Else            {                Store (Ones, Local0)            }            Return (Local0)        }            

        Method (SMBR, 3, Serialized)        {            Store (Package (0x03)                {                    0x07,                     0x00,                     0x00                }, Local0)            If (LNot (ECAV ()))            {                Return (Local0)            }            If (LNotEqual (Arg0, RDBL))            {                If (LNotEqual (Arg0, RDWD))                {                    If (LNotEqual (Arg0, RDBT))                    {                        If (LNotEqual (Arg0, RCBT))                        {                            If (LNotEqual (Arg0, RDQK))                            {                                Return (Local0)                            }                        }                    }                }            }            If (LEqual (Acquire (MUEC, 0xFFFF), 0x00))            {                Store (PRTC, Local1)                Store (Zero, Local2)                While (LNotEqual (Local1, 0x00))                {                    Stall (0x0A)                    Increment (Local2)                    If (LGreater (Local2, 0x03E8))                    {                        Store (SBBY, Index (Local0, 0x00))                        Store (Zero, Local1)                    }                    Else                    {                        Store (PRTC, Local1)                    }                }                If (LLessEqual (Local2, 0x03E8))                {                    ShiftLeft (Arg1, 0x01, Local3)                    Or (Local3, 0x01, Local3)                    Store (Local3, ADDR)                    If (LNotEqual (Arg0, RDQK))                    {                        If (LNotEqual (Arg0, RCBT))                        {                            Store (Arg2, CMDB)                        }                    }                    WRBA(0x00)                    Store (Arg0, PRTC)                    Store (SWTC (Arg0), Index (Local0, 0x00))                    If (LEqual (DerefOf (Index (Local0, 0x00)), 0x00))                    {                        If (LEqual (Arg0, RDBL))                        {                            Store (BCNT, Index (Local0, 0x01))                            Store (RDBA(), Index (Local0, 0x02))                        }                        If (LEqual (Arg0, RDWD))                        {                            Store (0x02, Index (Local0, 0x01))                            Store (B1B2(T2B0,T2B1), Index (Local0, 0x02))                        }                        If (LEqual (Arg0, RDBT))                        {                            Store (0x01, Index (Local0, 0x01))                            Store (DAT0, Index (Local0, 0x02))                        }                        If (LEqual (Arg0, RCBT))                        {                            Store (0x01, Index (Local0, 0x01))                            Store (DAT0, Index (Local0, 0x02))                        }                    }                }                Release (MUEC)            }            Return (Local0)        }
        
        Method (SMBW, 5, Serialized)        {            Store (Package (0x01)                {                    0x07                }, Local0)            If (LNot (ECAV ()))            {                Return (Local0)            }            If (LNotEqual (Arg0, WRBL))            {                If (LNotEqual (Arg0, WRWD))                {                    If (LNotEqual (Arg0, WRBT))                    {                        If (LNotEqual (Arg0, SDBT))                        {                            If (LNotEqual (Arg0, WRQK))                            {                                Return (Local0)                            }                        }                    }                }            }            If (LEqual (Acquire (MUEC, 0xFFFF), 0x00))            {                Store (PRTC, Local1)                Store (Zero, Local2)                While (LNotEqual (Local1, 0x00))                {                    Stall (0x0A)                    Increment (Local2)                    If (LGreater (Local2, 0x03E8))                    {                        Store (SBBY, Index (Local0, 0x00))                        Store (Zero, Local1)                    }                    Else                    {                        Store (PRTC, Local1)                    }                }                If (LLessEqual (Local2, 0x03E8))                {                    WRBA(0x00)                    ShiftLeft (Arg1, 0x01, Local3)                    Store (Local3, ADDR)                    If (LNotEqual (Arg0, WRQK))                    {                        If (LNotEqual (Arg0, SDBT))                        {                            Store (Arg2, CMDB)                        }                    }                    If (LEqual (Arg0, WRBL))                    {                        Store (Arg3, BCNT)                        WRBA(Arg4)                    }                    If (LEqual (Arg0, WRWD))                    {                        Store(Arg4,T2B0) Store(ShiftRight(Arg4,8),T2B1)                    }                    If (LEqual (Arg0, WRBT))                    {                        Store (Arg4, DAT0)                    }                    If (LEqual (Arg0, SDBT))                    {                        Store (Arg4, DAT0)                    }                    Store (Arg0, PRTC)                    Store (SWTC (Arg0), Index (Local0, 0x00))                }                Release (MUEC)            }            Return (Local0)        }
        
        Method (ECSB, 7, NotSerialized)        {            Store (Package (0x05)                {                    0x11,                     0x00,                     0x00,                     0x00,                     Buffer (0x20) {}                }, Local1)            If (LGreater (Arg0, 0x01))            {                Return (Local1)            }            If (ECAV ())            {                If (LEqual (Acquire (MUEC, 0xFFFF), 0x00))                {                    If (LEqual (Arg0, 0x00))                    {                        Store (PRTC, Local0)                    }                    Else                    {                        Store (PRT2, Local0)                    }                    Store (Zero, Local2)                    While (LNotEqual (Local0, 0x00))                    {                        Stall (0x0A)                        Increment (Local2)                        If (LGreater (Local2, 0x03E8))                        {                            Store (SBBY, Index (Local1, 0x00))                            Store (Zero, Local0)                        }                        Else                        {                            If (LEqual (Arg0, 0x00))                            {                                Store (PRTC, Local0)                            }                            Else                            {                                Store (PRT2, Local0)                            }                        }                    }                    If (LLessEqual (Local2, 0x03E8))                    {                        If (LEqual (Arg0, 0x00))                        {                            Store (Arg2, ADDR)                            Store (Arg3, CMDB)                            Store (Arg4, DAT0)                            Store (Arg5, DAT1)                            Store (DerefOf (Index (Arg6, 0x00)), BCNT)                            WRBA(DerefOf (Index (Arg6, 0x01)))                            Store (Arg1, PRTC)                        }                        Else                        {                            Store (Arg2, ADD2)                            Store (Arg3, CMD2)                            Store (Arg4, DA20)                            Store (Arg5, DA21)                            Store (DerefOf (Index (Arg6, 0x00)), BCN2)                            WRBB(DerefOf (Index (Arg6, 0x01)))                            Store (Arg1, PRT2)                        }                        Store (0x7F, Local0)                        If (LEqual (Arg0, 0x00))                        {                            While (PRTC)                            {                                Sleep (0x01)                                Decrement (Local0)                            }                        }                        Else                        {                            While (PRT2)                            {                                Sleep (0x01)                                Decrement (Local0)                            }                        }                        If (Local0)                        {                            If (LEqual (Arg0, 0x00))                            {                                Store (SSTS, Local0)                                Store (DAT0, Index (Local1, 0x01))                                Store (DAT1, Index (Local1, 0x02))                                Store (BCNT, Index (Local1, 0x03))                                Store (RDBA(), Index (Local1, 0x04))                            }                            Else                            {                                Store (SST2, Local0)                                Store (DA20, Index (Local1, 0x01))                                Store (DA21, Index (Local1, 0x02))                                Store (BCN2, Index (Local1, 0x03))                                Store (RDBB(), Index (Local1, 0x04))                            }                            And (Local0, 0x1F, Local0)                            If (Local0)                            {                                Add (Local0, 0x10, Local0)                            }                            Store (Local0, Index (Local1, 0x00))                        }                        Else                        {                            Store (0x10, Index (Local1, 0x00))                        }                    }                    Release (MUEC)                }            }            Return (Local1)        }
        
        Method (TACH, 1, NotSerialized)        {            If (Arg0)            {                If (ECAV ())                {                    If (And (DECF, 0x02))                    {                        Store (RRAM (0x1820), Local0)                        Store (RRAM (0x1821), Local1)                        ShiftLeft (Local1, 0x08, Local1)                        Add (Local0, Local1, Local0)                    }                    Else                    {                        Store (B1B2(TH10,TH11), Local0)                    }                    And (Local0, 0xFFFF, Local0)                    If (LNotEqual (Local0, 0x00))                    {                        If (LEqual (Local0, 0xFFFF))                        {                            Store (Zero, Local0)                        }                        Else                        {                            Store (0x80, Local1)                            Store (0x02, Local2)                            Multiply (Local1, Local2, Local3)                            Multiply (Local0, Local3, Local4)                            Divide (0x03938700, Local4, Local5, Local6)                            Multiply (Local6, 0x0A, Local6)                            Store (Local6, Local0)                        }                    }                    Else                    {                        Store (Zero, Local0)                    }                }                Else                {                    Store (Ones, Local0)                }                Return (Local0)            }            Else            {                If (ECAV ())                {                    If (And (DECF, 0x01))                    {                        Store (RRAM (0x181E), Local0)                        Store (RRAM (0x181F), Local1)                        ShiftLeft (Local1, 0x08, Local1)                        Add (Local0, Local1, Local0)                    }                    Else                    {                        Store (B1B2(TH00,TH01), Local0)                    }                    And (Local0, 0xFFFF, Local0)                    If (LNotEqual (Local0, 0x00))                    {                        If (LEqual (Local0, 0xFFFF))                        {                            Store (Zero, Local0)                        }                        Else                        {                            Store (0x80, Local1)                            Store (0x02, Local2)                            Multiply (Local1, Local2, Local3)                            Multiply (Local0, Local3, Local4)                            Divide (0x03938700, Local4, Local5, Local6)                            Multiply (Local6, 0x0A, Local6)                            Store (Local6, Local0)                        }                    }                    Else                    {                        Store (Zero, Local0)                    }                }                Else                {                    Store (Ones, Local0)                }                Return (Local0)            }        }
    }    
    
    Method (B1B2, 2, NotSerialized) { Return (Or (Arg0, ShiftLeft (Arg1, 8))) }
    
    // added methods (group 2)
    Scope (_SB.PCI0.LPCB)
    {
        Scope (EC)
        {
            Method (RDBA, 0, Serialized)            {                Name (TEMP, Buffer(0x20) { })                Store (BA00, Index(TEMP, 0x00))                Store (BA01, Index(TEMP, 0x01))                Store (BA02, Index(TEMP, 0x02))                Store (BA03, Index(TEMP, 0x03))                Store (BA04, Index(TEMP, 0x04))                Store (BA05, Index(TEMP, 0x05))                Store (BA06, Index(TEMP, 0x06))                Store (BA07, Index(TEMP, 0x07))                Store (BA08, Index(TEMP, 0x08))                Store (BA09, Index(TEMP, 0x09))                Store (BA0A, Index(TEMP, 0x0A))                Store (BA0B, Index(TEMP, 0x0B))                Store (BA0C, Index(TEMP, 0x0C))                Store (BA0D, Index(TEMP, 0x0D))                Store (BA0E, Index(TEMP, 0x0E))                Store (BA0F, Index(TEMP, 0x0F))                Store (BA10, Index(TEMP, 0x10))                Store (BA11, Index(TEMP, 0x11))                Store (BA12, Index(TEMP, 0x12))                Store (BA13, Index(TEMP, 0x13))                Store (BA14, Index(TEMP, 0x14))                Store (BA15, Index(TEMP, 0x15))                Store (BA16, Index(TEMP, 0x16))                Store (BA17, Index(TEMP, 0x17))                Store (BA18, Index(TEMP, 0x18))                Store (BA19, Index(TEMP, 0x19))                Store (BA1A, Index(TEMP, 0x1A))                Store (BA1B, Index(TEMP, 0x1B))                Store (BA1C, Index(TEMP, 0x1C))                Store (BA1D, Index(TEMP, 0x1D))                Store (BA1E, Index(TEMP, 0x1E))                Store (BA1F, Index(TEMP, 0x1F))                Return (TEMP)            }
            Method (WRBA, 1, Serialized)            {                Name (TEMP, Buffer(0x20) { })                Store (Arg0, TEMP)                Store (DerefOf(Index(TEMP, 0x00)), BA00)                Store (DerefOf(Index(TEMP, 0x01)), BA01)                Store (DerefOf(Index(TEMP, 0x02)), BA02)                Store (DerefOf(Index(TEMP, 0x03)), BA03)                Store (DerefOf(Index(TEMP, 0x04)), BA04)                Store (DerefOf(Index(TEMP, 0x05)), BA05)                Store (DerefOf(Index(TEMP, 0x06)), BA06)                Store (DerefOf(Index(TEMP, 0x07)), BA07)                Store (DerefOf(Index(TEMP, 0x08)), BA08)                Store (DerefOf(Index(TEMP, 0x09)), BA09)                Store (DerefOf(Index(TEMP, 0x0A)), BA0A)                Store (DerefOf(Index(TEMP, 0x0B)), BA0B)                Store (DerefOf(Index(TEMP, 0x0C)), BA0C)                Store (DerefOf(Index(TEMP, 0x0D)), BA0D)                Store (DerefOf(Index(TEMP, 0x0E)), BA0E)                Store (DerefOf(Index(TEMP, 0x0F)), BA0F)                Store (DerefOf(Index(TEMP, 0x10)), BA10)                Store (DerefOf(Index(TEMP, 0x11)), BA11)                Store (DerefOf(Index(TEMP, 0x12)), BA12)                Store (DerefOf(Index(TEMP, 0x13)), BA13)                Store (DerefOf(Index(TEMP, 0x14)), BA14)                Store (DerefOf(Index(TEMP, 0x15)), BA15)                Store (DerefOf(Index(TEMP, 0x16)), BA16)                Store (DerefOf(Index(TEMP, 0x17)), BA17)                Store (DerefOf(Index(TEMP, 0x18)), BA18)                Store (DerefOf(Index(TEMP, 0x19)), BA19)                Store (DerefOf(Index(TEMP, 0x1A)), BA1A)                Store (DerefOf(Index(TEMP, 0x1B)), BA1B)                Store (DerefOf(Index(TEMP, 0x1C)), BA1C)                Store (DerefOf(Index(TEMP, 0x1D)), BA1D)                Store (DerefOf(Index(TEMP, 0x1E)), BA1E)                Store (DerefOf(Index(TEMP, 0x1F)), BA1F)            }            Method (RDBB, 0, Serialized)            {                Name (TEMP, Buffer(0x20) { })                Store (BB00, Index(TEMP, 0x00))                Store (BB01, Index(TEMP, 0x01))                Store (BB02, Index(TEMP, 0x02))                Store (BB03, Index(TEMP, 0x03))                Store (BB04, Index(TEMP, 0x04))                Store (BB05, Index(TEMP, 0x05))                Store (BB06, Index(TEMP, 0x06))                Store (BB07, Index(TEMP, 0x07))                Store (BB08, Index(TEMP, 0x08))                Store (BB09, Index(TEMP, 0x09))                Store (BB0A, Index(TEMP, 0x0A))                Store (BB0B, Index(TEMP, 0x0B))                Store (BB0C, Index(TEMP, 0x0C))                Store (BB0D, Index(TEMP, 0x0D))                Store (BB0E, Index(TEMP, 0x0E))                Store (BB0F, Index(TEMP, 0x0F))                Store (BB10, Index(TEMP, 0x10))                Store (BB11, Index(TEMP, 0x11))                Store (BB12, Index(TEMP, 0x12))                Store (BB13, Index(TEMP, 0x13))                Store (BB14, Index(TEMP, 0x14))                Store (BB15, Index(TEMP, 0x15))                Store (BB16, Index(TEMP, 0x16))                Store (BB17, Index(TEMP, 0x17))                Store (BB18, Index(TEMP, 0x18))                Store (BB19, Index(TEMP, 0x19))                Store (BB1A, Index(TEMP, 0x1A))                Store (BB1B, Index(TEMP, 0x1B))                Store (BB1C, Index(TEMP, 0x1C))                Store (BB1D, Index(TEMP, 0x1D))                Store (BB1E, Index(TEMP, 0x1E))                Store (BB1F, Index(TEMP, 0x1F))                Return (TEMP)            }            Method (WRBB, 1, Serialized)            {                Name (TEMP, Buffer(0x20) { })                Store (Arg0, TEMP)                Store (DerefOf(Index(TEMP, 0x00)), BB00)                Store (DerefOf(Index(TEMP, 0x01)), BB01)                Store (DerefOf(Index(TEMP, 0x02)), BB02)                Store (DerefOf(Index(TEMP, 0x03)), BB03)                Store (DerefOf(Index(TEMP, 0x04)), BB04)                Store (DerefOf(Index(TEMP, 0x05)), BB05)                Store (DerefOf(Index(TEMP, 0x06)), BB06)                Store (DerefOf(Index(TEMP, 0x07)), BB07)                Store (DerefOf(Index(TEMP, 0x08)), BB08)                Store (DerefOf(Index(TEMP, 0x09)), BB09)                Store (DerefOf(Index(TEMP, 0x0A)), BB0A)                Store (DerefOf(Index(TEMP, 0x0B)), BB0B)                Store (DerefOf(Index(TEMP, 0x0C)), BB0C)                Store (DerefOf(Index(TEMP, 0x0D)), BB0D)                Store (DerefOf(Index(TEMP, 0x0E)), BB0E)                Store (DerefOf(Index(TEMP, 0x0F)), BB0F)                Store (DerefOf(Index(TEMP, 0x10)), BB10)                Store (DerefOf(Index(TEMP, 0x11)), BB11)                Store (DerefOf(Index(TEMP, 0x12)), BB12)                Store (DerefOf(Index(TEMP, 0x13)), BB13)                Store (DerefOf(Index(TEMP, 0x14)), BB14)                Store (DerefOf(Index(TEMP, 0x15)), BB15)                Store (DerefOf(Index(TEMP, 0x16)), BB16)                Store (DerefOf(Index(TEMP, 0x17)), BB17)                Store (DerefOf(Index(TEMP, 0x18)), BB18)                Store (DerefOf(Index(TEMP, 0x19)), BB19)                Store (DerefOf(Index(TEMP, 0x1A)), BB1A)                Store (DerefOf(Index(TEMP, 0x1B)), BB1B)                Store (DerefOf(Index(TEMP, 0x1C)), BB1C)                Store (DerefOf(Index(TEMP, 0x1D)), BB1D)                Store (DerefOf(Index(TEMP, 0x1E)), BB1E)                Store (DerefOf(Index(TEMP, 0x1F)), BB1F)            }
        }
    }
}
//EOF
